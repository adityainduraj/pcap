//deadlock_synchronous

#include <mpi.h>
#include <stdio.h>

int main(int argc, char *argv[]) {
    int rank, size, data;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size != 2) {
        if (rank == 0) {
            printf("Run this program with 2 processes!\n");
        }
        MPI_Finalize();
        return 1;
    }

    data = rank; // Each process holds its rank as data

    if (rank == 0) {
        MPI_Ssend(&data, 1, MPI_INT, 1, 0, MPI_COMM_WORLD); // Sends first, no matching receive
        MPI_Recv(&data, 1, MPI_INT, 1, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    } else {
        MPI_Ssend(&data, 1, MPI_INT, 0, 1, MPI_COMM_WORLD); // Sends first, no matching receive
        MPI_Recv(&data, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    }

    printf("Process %d received data %d\n", rank, data);
    MPI_Finalize();
    return 0;
}

//deadlock_standard

#include <mpi.h>
#include <stdio.h>

int main(int argc, char *argv[]) {
    int rank, size, data;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size != 2) {
        if (rank == 0) {
            printf("Run this program with 2 processes!\n");
        }
        MPI_Finalize();
        return 1;
    }

    data = rank;

    if (rank == 0) {
        MPI_Send(&data, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);
        MPI_Recv(&data, 1, MPI_INT, 1, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    } else {
        MPI_Send(&data, 1, MPI_INT, 0, 1, MPI_COMM_WORLD);
        MPI_Recv(&data, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    }

    printf("Process %d received data %d\n", rank, data);
    MPI_Finalize();
    return 0;
}


// mpicc -o deadlock_synchronous deadlock_synchronous.c
// mpicc -o deadlock_standard deadlock_standard.c

// mpirun -np 2 ./deadlock_synchronous
// mpirun -np 2 ./deadlock_standard

